{
  "description": "Pipeline for parsing nginx-request-body requestbody logs",
  "processors": [{
    "grok": {
      "field": "message",
      "patterns":[
        "\"?%{IP_LIST:nginx-request-body.requestbody.remote_ip_list} - %{DATA:nginx-request-body.requestbody.user_name} \\[%{HTTPDATE:nginx-request-body.requestbody.time}\\] \"%{WORD:nginx-request-body.requestbody.method} %{DATA:nginx-request-body.requestbody.url} HTTP/%{NUMBER:nginx-request-body.requestbody.http_version}\" %{NUMBER:nginx-request-body.requestbody.response_code} %{NUMBER:nginx-request-body.requestbody.body_sent.bytes} \"%{DATA:nginx-request-body.requestbody.referrer}\" \"%{DATA:nginx-request-body.requestbody.agent}\" |%{DATA:nginx-request-body.requestbody.request_body}|"
        ],
      "pattern_definitions": {
        "IP_LIST": "%{IP}(\"?,?\\s*%{IP})*"
      },
      "ignore_missing": true
    }
  }, {
    "split": {
      "field": "nginx-request-body.requestbody.remote_ip_list",
      "separator": "\"?,?\\s+"
    }
  }, {
    "script": {
      "lang": "painless",
      "inline": "boolean isPrivate(def ip) { try { StringTokenizer tok = new StringTokenizer(ip, '.'); int firstByte = Integer.parseInt(tok.nextToken());       int secondByte = Integer.parseInt(tok.nextToken());       if (firstByte == 10) {         return true;       }       if (firstByte == 192 && secondByte == 168) {         return true;       }       if (firstByte == 172 && secondByte >= 16 && secondByte <= 31) {         return true;       }       if (firstByte == 127) {         return true;       }       return false;     } catch (Exception e) {       return false;     }   }   def found = false;   for (def item : ctx.nginx-request-body.requestbody.remote_ip_list) {     if (!isPrivate(item)) {       ctx.nginx-request-body.requestbody.remote_ip = item;       found = true;       break;     }   }   if (!found) {     ctx.nginx-request-body.requestbody.remote_ip = ctx.nginx-request-body.requestbody.remote_ip_list[0];   }"
      }
  }, {
    "remove":{
      "field": "message"
    }
  }, {
    "rename": {
      "field": "@timestamp",
      "target_field": "read_timestamp"
    }
  }, {
    "date": {
      "field": "nginx-request-body.requestbody.time",
      "target_field": "@timestamp",
      "formats": ["dd/MMM/YYYY:H:m:s Z"]
    }
  }, {
    "remove": {
      "field": "nginx-request-body.requestbody.time"
    }
  }, {
    "user_agent": {
      "field": "nginx-request-body.requestbody.agent",
      "target_field": "nginx-request-body.requestbody.user_agent"
    }
  }, {
    "request_body": {
      "field": "nginx-request-body.requestbody.requestbody",
      "target_field": "nginx-request-body.requestbody.request_body"
    }
  }, {
    "remove": {
      "field": "nginx-request-body.requestbody.agent"
    }
  }, {
    "geoip": {
      "field": "nginx-request-body.requestbody.remote_ip",
      "target_field": "nginx-request-body.requestbody.geoip"
    }
  }],
  "on_failure" : [{
    "set" : {
      "field" : "error.message",
      "value" : "{{ _ingest.on_failure_message }}"
    }
  }]
}

